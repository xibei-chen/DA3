scale_y_continuous(limits=c(90,105), breaks=seq(90,105, by=5)) +
theme_minimal()+
theme(axis.text.x=element_text(angle=45,hjust=1))
pdp_n_propertytype %>%
autoplot( ) +
geom_point(color='#e85d04', size=4) +
ylab("Predicted price") +
xlab("Property type") +
scale_y_continuous(limits=c(95,105), breaks=seq(95,105, by=5)) +
theme_minimal()+
theme(axis.text.x=element_text(angle=45,hjust=1))
pd1<- pdp_n_acc %>%
autoplot( ) +
geom_line(color='#2a9d8f', size=1) +
geom_point(color='#e85d04', size=2) +
ylab("Predicted price") +
xlab("Accommodates (persons)") +
scale_x_continuous(limit=c(2,6), breaks=seq(2,6,1))+
theme_minimal()
pd2 <- pdp_n_propertytype %>%
autoplot( ) +
geom_point(color='#e85d04', size=4) +
ylab("Predicted price") +
xlab("Property type") +
scale_y_continuous(limits=c(95,105), breaks=seq(95,105, by=5)) +
theme_minimal()+
theme(axis.text.x=element_text(angle=45,hjust=1))
ggarrange(pd1, pd2, ncol = 2, nrow = 1)
pdp_n_acc %>%
autoplot( ) +
geom_line(color='#2a9d8f', size=1) +
geom_point(color='#e85d04', size=2) +
ylab("Predicted price") +
xlab("Accommodates (persons)") +
scale_x_continuous(limit=c(2,6), breaks=seq(2,6,1))+
theme_minimal()
pdp_n_acc %>%
autoplot( ) +
geom_line(color='#2a9d8f', size=1) +
geom_point(color='#e85d04', size=2) +
ylab("Predicted price") +
xlab("Accommodates (persons)") +
scale_x_continuous(limit=c(2,6), breaks=seq(2,6,1))+
theme_minimal()
pdp_n_propertytype %>%
autoplot( ) +
geom_point(color='#e85d04', size=4) +
ylab("Predicted price") +
xlab("Property type") +
scale_y_continuous(limits=c(95,105), breaks=seq(95,105, by=5)) +
theme_minimal()+
theme(axis.text.x=element_text(angle=45,hjust=1))
# Subsample performance
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Subsample performance
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Create nice summary table of heterogeneity
a <- data_ne_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "small apt", "medium apt")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_ne_holdout_w_prediction %>%
filter(f_neighbourhood_cleansed %in% c("Ville-Marie", "Le Plateau-Mont-Royal",
"Le Sud-Ouest", "Côte-des-Neiges-Notre-Dame-de-Grâce",
"Westmount")) %>%
group_by(f_neighbourhood_cleansed) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft","Entire residential home","Entire townhouse")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_ne_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_3 <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
result_3
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(latex_options = c("hold_position","scale_down"))
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
options(knitr.kable.NA = '')
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
# Subsample performance
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Create nice summary table of heterogeneity
a <- data_ne_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "small apt", "medium apt")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_ne_holdout_w_prediction %>%
filter(f_neighbourhood_cleansed %in% c("Ville-Marie", "Le Plateau-Mont-Royal",
"Le Sud-Ouest", "Côte-des-Neiges-Notre-Dame-de-Grâce",
"Westmount")) %>%
group_by(f_neighbourhood_cleansed) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_ne_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
options(knitr.kable.NA = '')
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
# Subsample performance
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Create nice summary table of heterogeneity
a <- data_ne_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "Small apt", "Medium apt")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_ne_holdout_w_prediction %>%
filter(f_neighbourhood_cleansed %in% c("Ville-Marie", "Le Plateau-Mont-Royal",
"Le Sud-Ouest", "Côte-des-Neiges-Notre-Dame-de-Grâce",
"Westmount")) %>%
group_by(f_neighbourhood_cleansed) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_ne_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
# Save output
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
options(knitr.kable.NA = '')
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Create nice summary table of heterogeneity
a <- data_ne_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "Small apt", "Medium apt")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_ne_holdout_w_prediction %>%
filter(f_neighbourhood_cleansed %in% c("Ville-Marie", "Le Plateau-Mont-Royal",
"Le Sud-Ouest", "Côte-des-Neiges-Notre-Dame-de-Grâce",
"Westmount")) %>%
group_by(f_neighbourhood_cleansed) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_ne_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
# Save output
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
options(knitr.kable.NA = '')
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
# Save output
colnames(a) <- c("Subsamples", "RMSE", "Mean price", "RMSE/price")
colnames(a) <- c("Subsamples", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
# Subsample performance
data_ne_holdout_w_prediction <- data_ne_holdout %>%
mutate(predicted_price = predict(ne_rf_model, newdata = data_ne_holdout))
# Create nice summary table of heterogeneity
a <- data_ne_holdout_w_prediction %>%
mutate(is_low_size = ifelse(n_accommodates <= 3, "Small apt", "Medium apt")) %>%
group_by(is_low_size) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
b <- data_ne_holdout_w_prediction %>%
filter(f_neighbourhood_cleansed %in% c("Ville-Marie", "Le Plateau-Mont-Royal",
"Le Sud-Ouest", "Côte-des-Neiges-Notre-Dame-de-Grâce",
"Westmount")) %>%
group_by(f_neighbourhood_cleansed) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
c <- data_ne_holdout_w_prediction %>%
filter(f_property_type %in% c("Entire condominium (condo)", "Entire loft")) %>%
group_by(f_property_type) %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = rmse / mean_price
)
d <- data_ne_holdout_w_prediction %>%
dplyr::summarise(
rmse = RMSE(predicted_price, price),
mean_price = mean(price),
rmse_norm = RMSE(predicted_price, price) / mean(price)
)
colnames(a) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(b) <- c("", "RMSE", "Mean price", "RMSE/price")
colnames(c) <- c("", "RMSE", "Mean price", "RMSE/price")
d<- cbind("All", d)
colnames(d) <- c("", "RMSE", "Mean price", "RMSE/price")
line1 <- c("Type", "", "", "")
line2 <- c("Apartment size", "", "", "")
line3 <- c("District", "", "", "")
result_subsamples <- rbind(line2, a, line1, c, line3, b, d) %>%
transform(RMSE = as.numeric(RMSE), `Mean price` = as.numeric(`Mean price`),
`RMSE/price` = as.numeric(`RMSE/price`))
result_subsamples
options(knitr.kable.NA = '')
options(knitr.kable.NA = c('', 'Var.1'))
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
options(knitr.kable.NA = '')
kable(result_subsamples, booktabs = TRUE) %>% kable_styling(full_width= F, latex_options = c("hold_position","scale_down"))
warnings()
da3_a2_summary_report.log
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, error=FALSE)
datasummary( price ~ Mean + Median + SD+ Min + P25 + P75 + Max + N, data = data ) %>%
kable_styling(caption ="Descriptive Statistics of Daily Price (CA$)", latex_options = c("HOLD_position","scale_down"))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, error=FALSE)
# Load raw data
data <- read_csv("/Users/xibei/Documents/2021CEU/DA3/listings_montreal_20211211_cleaned.csv") %>%
mutate_if(is.character, factor)
# Clear environment
rm(list=ls())
library(tidyverse)
library(data.table)
library(caret)
library(skimr)
library(grid)
library(glmnet)
library(cowplot)
library(modelsummary)
library(fixest)
library(ggthemes)
library(gridExtra)
library(rpart)
library(rattle)
library(rpart.plot)
library(ranger)
library(pdp)
library(gbm)
library(ggpubr)
library(kableExtra)
# Load raw data
data <- read_csv("/Users/xibei/Documents/2021CEU/DA3/listings_montreal_20211211_cleaned.csv") %>%
mutate_if(is.character, factor)
datasummary( price ~ Mean + Median + SD+ Min + P25 + P75 + Max + N, data = data) %>% kable_styling(latex_options = c("HOLD_position","scale_down"))
# Manage samples:
# Create a holdout set (20% of observations)
smp_size <- floor(0.2 * nrow(data))
# Set the random number generator to make results reproducible
set.seed(20220210)
holdout_ids <- sample( seq_len( nrow( data ) ) , size = smp_size )
data$holdout <- 0
data$holdout[holdout_ids] <- 1
# Hold-out set Set
data_holdout <- data %>% filter(holdout == 1)
# Working data set
data_work <- data %>% filter(holdout == 0)
# Source from pre-created variable groups
source("/Users/xibei/Documents/2021CEU/DA3/define_var_groups.R")
basic_lev  <- c("f_neighbourhood_cleansed", "f_property_type", "n_accommodates","n_bedrooms","n_beds", "n_dt_host_since_to_today")
# Basic Add levels
basic_add_lev <- c("n_minimum_nights", "n_maximum_nights", "d_has_availability", "n_availability_30", "d_instant_bookable")
# Reviews levels
reviews_lev <- c("n_number_of_reviews","n_review_scores_rating","n_review_scores_cleanliness", "n_review_scores_value")
# Polynomial and log-level
poly_log_lev <- c("n_squared_number_of_reviews", "n_cubic_number_of_reviews", "n_ln_host_since_to_today")
# Amenities general levels - I grouped already previously
# amenities_general
# Interaction terms
X1  <- c("f_property_type*d_pets_allowed",  "f_property_type*d_pool")
X2  <- c("f_neighbourhood_cleansed*d_free_parking", "f_neighbourhood_cleansed*d_lake_access")
modellev1 <- " ~ n_accommodates"
modellev2 <- paste0(" ~ ",paste(basic_lev,collapse = " + "))
modellev3 <- paste0(" ~ ",paste(c(basic_lev, basic_add_lev),collapse = " + "))
modellev4 <- paste0(" ~ ",paste(c(basic_lev, basic_add_lev, reviews_lev, poly_log_lev),collapse = " + "))
modellev5 <- paste0(" ~ ",paste(c(basic_lev, basic_add_lev, reviews_lev, poly_log_lev, X1),collapse = " + "))
modellev6 <- paste0(" ~ ",paste(c(basic_lev, basic_add_lev, reviews_lev, poly_log_lev, X1,X2),collapse = " + "))
modellev7 <- paste0(" ~ ",paste(c(basic_lev, basic_add_lev, reviews_lev, poly_log_lev, X1,X2, amenities_general),collapse = " + "))
# Do everything within a for-loop
# K = 5
k_folds <- 5
# Define seed value
seed_val <- 20220210
for ( i in 1:7 ){
print(paste0( "Estimating model: " ,i ))
# Get the model name
model_name <-  paste0("modellev",i)
model_pretty_name <- paste0("M",i,"")
# Specify the formula
yvar <- "price"
xvars <- eval(parse(text = model_name))
formula <- formula(paste0(yvar,xvars))
# Estimate model on the whole sample
model_work_data <- feols( formula , data = data_work , vcov='hetero' )
#  and get the summary statistics
fs  <- fitstat(model_work_data,c('rmse','r2','bic'))
BIC <- fs$bic
r2  <- fs$r2
rmse_train <- fs$rmse
ncoeff <- length( model_work_data$coefficients )
# Do the k-fold estimation
set.seed(seed_val)
cv_i <- train( formula, data_work, method = "lm",
trControl = trainControl(method = "cv", number = k_folds))
rmse_test <- mean( cv_i$resample$RMSE )
# Save the results
model_add <- tibble(Model=model_pretty_name, Coefficients=ncoeff,
R_squared=r2, BIC = BIC,
Training_RMSE = rmse_train, Test_RMSE = rmse_test )
if ( i == 1 ){
model_results <- model_add
} else{
model_results <- rbind( model_results , model_add )
}
}
# Set lasso tuning parameters:
# a) basic setup
train_control <- trainControl( method = "cv", number = k_folds)
# b) tell the actual lambda (penalty parameter) to use for lasso
tune_grid     <- expand.grid("alpha" = c(1), "lambda" = seq(0.05, 1, by = 0.05))
# c) create a formula
# Take OLS model 7
formula <- formula(paste0("price", paste(modellev7, collapse = " + ")))
# Run LASSO
set.seed(seed_val)
lasso_model <- caret::train(formula,
data = data_work,
method = "glmnet",
preProcess = c("center", "scale"),
trControl = train_control,
tuneGrid = tune_grid,
na.action=na.exclude)
lasso_coeffs <- coef(lasso_model$finalModel, lasso_model$bestTune$lambda) %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "variable") %>%
rename(coefficient = `s1`)  # the column has a name "1", to be renamed
#print(lasso_coeffs)
# Check the number of variables which actually has coefficients other than 0
lasso_coeffs_nz<-lasso_coeffs %>%
filter(coefficient!=0)
# Get the RMSE of the Lasso model
# Compare this to the test RMSE
lasso_fitstats <- lasso_model$results %>%
filter(lambda == lasso_model$bestTune$lambda)
# Create an auxilary tibble
lasso_add <- tibble(Model='LASSO', Coefficients=nrow(lasso_coeffs_nz),
R_squared=lasso_fitstats$Rsquared, BIC = NA,
Training_RMSE = NA, Test_RMSE = lasso_fitstats$RMSE )
# Add it to final results
model_results_lasso <- rbind( model_results , lasso_add )
kable(model_results_lasso, booktabs = TRUE, caption = 'OLS and Lasso Performance Summary (5-fold CV)') %>% kable_styling(latex_options = c("hold_position","scale_down"))
# Diagnostics
# Evaluate performance on the hold-out sample
# Re-run Model 7 on the work data
m7 <- feols( formula(paste0("price",modellev7)) , data = data_work, vcov = 'hetero' )
m7_p <- predict( m7 , newdata = data_holdout )
mL_p <- predict( lasso_model , newdata = data_holdout )
m7_rmse <- RMSE(m7_p,data_holdout$price)
mL_rmse <- RMSE(mL_p,data_holdout$price)
sum <- rbind(m7_rmse,mL_rmse)
rownames(sum) <- c('OLS M7','LASSO')
colnames(sum) <- c('RMSE on hold-out sample')
# Predicted vs Actual prices
data_holdout$predLp <- mL_p
ggplot( data_holdout , aes( y = price , x = predLp ) ) +
geom_point( size = 1 , color = '#2a9d8f' , alpha=0.4) +
geom_abline( intercept = 0, slope = 1, size = 1, color = '#e85d04' , alpha=0.8, linetype = 'dashed') +
xlim(-1,max(data_holdout$price))+
ylim(-1,max(data_holdout$price))+
labs(x='Predicted Daily Price (CA$)',y='Acutal Daily Price (CA$)')+
theme_minimal()
datasummary( price ~ Mean + Median + SD+ Min + P25 + P75 + Max + N, data = data) %>% kable_styling(latex_options = c("HOLD_position","scale_down"), font_size = 4, full_width = F)
datasummary( price ~ Mean + Median + SD+ Min + P25 + P75 + Max + N, data = data) %>% kable_styling(latex_options = c("HOLD_position","scale_down"), font_size = 4)
datasummary( price ~ Mean + Median + SD+ Min + P25 + P75 + Max + N, data = data, table.attr = "style='width:40%;'") %>% kable_styling(full_width = F, latex_options = c("HOLD_position","scale_down"), font_size = 4)
